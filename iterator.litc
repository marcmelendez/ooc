                              /* iterator.litc */

%! begin
An iterator may be thought of as a list of elements of the same type, with the
type being one of the options included in the list below. They should work in a
way analogous to the i variable in a typical for(int i = 0; i < N; ++i) loop. We
want to move forwards or backwards in the list and read the present value.
................................................................................
%! codeblock: iterator_value_struct
# ifndef VARIABLE_TYPE
# define VARIABLE_TYPE
typedef enum {POINTER = 0, INT, FLOAT, DOUBLE, CHAR, STRING} variable_type;
# endif

union iterator_value {
  int i;
  float f;
  double d;
  char c;
  char * s;
  void * p;
};
%! codeblockend
................................................................................

The following code snippet illustrates how we would like iterators to work.
It represents a standard for loop, which we would obviously normally write in
the usual simple way in real life. The idea, though, is that the new syntax will
also allow us to iterate over sets more cumbersome than integers using the same
interface.
................................................................................
%! codeblock: for_example
  new(it, iterator, INT);

  for(set(it, (union iterator_value) 10); get(it).i < 20; next(it))
    printf("i = %d\n", get(it).i);

  delete(it);
%! codeblockend
................................................................................

We'll define iterators as one of our occ classes, overwriting the constructor,
clone and display methods. In addition, we need methods to set and read the
current value of the iterator and make it advance or return.
................................................................................
%! codefile: iterator.h
# ifndef ITERATOR_H
# define ITERATOR_H
# include "object.h"

%! codeinsert: iterator_value_struct

struct iterator {
  const struct abstract_object _; /* This item must come first */
  variable_type val_type;
  union iterator_value val;
  union iterator_value (* next)(void * _self);
  union iterator_value (* prev)(void * _self);
  union iterator_value (* set)(void * _self, union iterator_value val);
  union iterator_value (* get)(void * _self);
};

static void * iterator_constructor(void * _self, va_list * args);
static void * iterator_clone(const void * _self);
static void * iterator_display(const void * _self, FILE * fp);

union iterator_value iterator_next(void * _self);
union iterator_value iterator_prev(void * _self);
variable_type iterator_type(const void * _self);
union iterator_value iterator_set(void * _self, union iterator_value val);
union iterator_value iterator_get(void * _self);

static const Class _iterator
  = {sizeof(struct iterator), "iterator", &_abstract_object,
     iterator_constructor, NULL};

const void * iterator = &_iterator;

%! codeinsert: iterator_constructor

%! codeinsert: iterator_clone

%! codeinsert: iterator_display

%! codeinsert: iterator_next

%! codeinsert: iterator_prev

%! codeinsert: iterator_set

%! codeinsert: iterator_type

%! codeinsert: iterator_get

%! codeinsert: iterator_generic_functions

# endif
%! codeend
................................................................................

The clone method just creates a new iterator and copies the values of val_type
and val. To display, we call the parent method and then add the print out the
extra information for iterators at the end.
................................................................................
%! codeblock: iterator_clone
static void * iterator_clone(const void * _self)
{
  if(inherits_from(_self, iterator)) {
    const struct iterator * self = _self;
    new(i, iterator);
    i->val_type = self->val_type;
    i->val = self->val;
    return i;
  }
  return NULL;
}
%! codeblockend

%! codeblock: iterator_display
static void * iterator_display(const void * _self, FILE * fp)
{
  abstract_object_display(_self, fp);

  if(inherits_from(_self, iterator)){
    const struct iterator * self = _self;
    fprintf(fp, "Current value: ");
    switch(self->val_type) {
      case INT:
        fprintf(fp, "%d\n", self->val.i);
        break;
      case FLOAT:
        fprintf(fp, "%f\n", self->val.f);
        break;
      case DOUBLE:
        fprintf(fp, "%f\n", self->val.d);
        break;
      case CHAR:
        fprintf(fp, "%c\n", self->val.c);
        break;
      case STRING:
        fprintf(fp, "%s\n", self->val.s);
        break;
      default:
        fprintf(fp, "%p\n", self->val.p);
    }
  }
  return NULL;
}
%! codeblockend
................................................................................

The constructor allows an extra variable in the new macro to specify the type of
variable saved in val. By default, it will consider val a void pointer to NULL.
................................................................................
%! codeblock: iterator_constructor
static void * iterator_constructor(void * _self, va_list * args)
{
  struct abstract_object * obj =  abstract_object_constructor(_self, args);
  obj->clone = iterator_clone;
  obj->display = iterator_display;
  struct iterator * self = _self;

  variable_type val_type = va_arg(*args, variable_type);

  if(val_type >= 0 && val_type <= STRING) {
    self->val_type = (variable_type) val_type;
  } else {
    self->val_type = POINTER;
  }
  self->val = (union iterator_value) NULL;

  self->next = iterator_next;
  self->prev = iterator_prev;
  self->set = iterator_set;
  self->get = iterator_get;

  return _self;
}
%! codeblockend
................................................................................

The next and prev functions act differently depending on the type of value. For
an integer, next should move on to the following integer, but a pointer iterator
should go to the subsequent memory address, for example.
................................................................................
%! codeblock: iterator_next
union iterator_value iterator_next(void * _self)
{
  struct iterator * self = _self;
  switch(self->val_type) {
    case INT:
      self->val.i++;
      break;
    case CHAR:
      self->val.c++;
      break;
    case FLOAT:
      self->val.f += 1.0f;
      break;
    case DOUBLE:
      self->val.d += 1.0;
      break;
    case STRING:
      self->val.s++;
      break;
    case POINTER:
      self->val.p++;
  }

  return self->val;
}
%! codeblockend

%! codeblock: iterator_prev
union iterator_value iterator_prev(void * _self)
{
  struct iterator * self = _self;
  switch(self->val_type) {
    case INT:
      self->val.i--;
    case CHAR:
      self->val.c--;
    case FLOAT:
      self->val.f -= 1.0f;
      break;
    case DOUBLE:
      self->val.d -= 1.0;
      break;
    case STRING:
      self->val.s--;
    case POINTER:
      self->val.p--;
  }

  return self->val;
}
%! codeblockend
................................................................................

Finally, we have functions to set or reset the value of an iterator, to read its
type and its current value.
................................................................................
%! codeblock: iterator_set
union iterator_value iterator_set(void * _self, union iterator_value val)
{
  struct iterator * self = _self;
  self->val = val;

  return self->val;
}
%! codeblockend

%! codeblock: iterator_type
variable_type iterator_type(const void * _self)
{
  if(inherits_from(_self, iterator)) {
    const struct iterator * self = _self;
    return self->val_type;
  }
  return -1;
}
%! codeblockend

%! codeblock: iterator_get
union iterator_value iterator_get(void * _self)
{
  struct iterator * self = _self;
  return self->val;
}
%! codeblockend
................................................................................

The generic versions of next, prev, set and get follow. They should work on any
objects that inherit from iterator.
................................................................................
%! codeblock: iterator_generic_functions
union iterator_value next(void * _self)
{
  if(inherits_from(_self, iterator)) {
    struct iterator * self = _self;
    if(self->next) return self->next(_self);
  }
  return (union iterator_value) NULL;
}

union iterator_value prev(void * _self)
{
  if(inherits_from(_self, iterator)) {
    struct iterator * self = _self;
    if(self->prev) return self->prev(_self);
  }
  return (union iterator_value) NULL;
}

union iterator_value set(void * _self, union iterator_value val)
{
  if(inherits_from(_self, iterator)) {
    struct iterator * self = _self;
    if(self->set) return self->set(_self, val);
  }
  return (union iterator_value) NULL;
}

union iterator_value get(void * _self)
{
  if(inherits_from(_self, iterator)) {
    struct iterator * self = _self;
    if(self->get) return self->get(_self);
  }
  return (union iterator_value) NULL;
}
%! codeblockend
................................................................................

As an example of the kind of applications that I have in mind, I'll write a time
iterator for physics simulations. In many applications, you can get away with
writing a simple for loop for the time, like this:

  double t;
  for(t = 0; t < tmax; t += dt)

However, errors can accumulate in floating point additions, so we will create an
iterator capable of giving us the next or previous time without any loss of
precision as the simulation proceeds. The time iterator will store the value of
the initial time t0 and the number of steps nsteps of size dt to the current
time, and calculate the latter as t = t0 + nsteps*dt.

We will need to override several functions: clone, display, next, prev and set.
We'll also introduce a new function, time_iterator_step, which allows us to set
the variable dt.
................................................................................
%! codeblock: time_iterator
struct time_iterator {
  const struct iterator _;
  double t0;
  double dt;
  long int step;
};

static void * time_iterator_clone(const void * _self);
static void * time_iterator_display(const void * _self, FILE * fp);
union iterator_value time_iterator_next(void * _self);
union iterator_value time_iterator_prev(void * _self);
union iterator_value time_iterator_set(void * _self, union iterator_value val);
union iterator_value time_iterator_step(void * _self, double val);

static void * time_iterator_constructor(void * _self, va_list * args)
{
  struct abstract_object * obj =  abstract_object_constructor(_self, args);
  obj->clone = time_iterator_clone;
  obj->display = time_iterator_display;

  struct iterator * self = _self;
  self->val_type = DOUBLE;
  self->val = (union iterator_value) 0.0;

  self->next = time_iterator_next;
  self->prev = time_iterator_prev;
  self->set = time_iterator_set;

  struct time_iterator * tself = _self;
  tself->t0 = 0.0;
  tself->dt = 1.0;
  tself->step = 0;

  return _self;
}

static const Class _time_iterator
  = {sizeof(struct time_iterator), "time iterator", &_iterator,
     time_iterator_constructor, NULL};

const void * time_iterator = &_time_iterator;

static void * time_iterator_clone(const void * _self)
{
  if(inherits_from(_self, time_iterator)) {
    const struct iterator * self = _self;
    const struct time_iterator * tself = _self;
    new(i, time_iterator);
    i->t0 = tself->t0;
    i->dt = tself->dt;
    i->step = tself->step;
    struct iterator * iti = _i;
    iti->val_type = self->val_type;
    iterator_set(i, self->val);
    return i;
  }
  return NULL;
}

static void * time_iterator_display(const void * _self, FILE * fp)
{
  iterator_display(_self, fp);

  if(inherits_from(_self, time_iterator)){
    const struct time_iterator * self = _self;
    fprintf(fp, "Initial time: %f\n", self->t0);
    fprintf(fp, "Time step: %f\n", self->dt);
  }

  return NULL;
}

union iterator_value time_iterator_next(void * _self)
{
  if(inherits_from(_self, time_iterator)){
    struct time_iterator * self = _self;
    self->step++;
    iterator_set(self,
                 (union iterator_value) (self->t0
                                         + self->dt*((double) self->step)));
  }
  struct iterator * self = _self;
  return self->val;
}

union iterator_value time_iterator_prev(void * _self)
{
  if(inherits_from(_self, iterator)){
    struct time_iterator * self = _self;
    self->step--;
    iterator_set(self,
                 (union iterator_value) (self->t0
                                         + self->dt*((double) self->step)));
  }
  struct iterator * self = _self;
  return self->val;
}

union iterator_value time_iterator_set(void * _self, union iterator_value val)
{
  if(inherits_from(_self, iterator)){
    struct time_iterator * self = _self;
    self->step = 0;
    self->t0 = val.d;
    iterator_set(self, val);
  }
  struct iterator * self = _self;
  return self->val;
}

union iterator_value time_iterator_dt(void * _self, double val)
{
  if(inherits_from(_self, iterator)){
    struct time_iterator * self = _self;
    self->dt = val;
  }
  struct iterator * self = _self;
  return self->val;
}
%! codeblockend
................................................................................

The main function below should serve as a check that everything compiles and
runs as expected.
................................................................................
%! codefile: examples/iterator_example.c
# include <stdio.h>
# include <math.h>
# include "../iterator.h"

%! codeinsert: time_iterator

int main() {
  /* Standard for loop */
  %! codeinsert: for_example

  /* Time loops */
  new(time, time_iterator);
  time_iterator_dt(time, 0.01);
  display(time, stderr);

  for(double t = set(time, (union iterator_value) 5.0).d;
      t < 10.0; t = next(time).d) {
    printf("%f  %f  %f\n", t, cos(t), sin(t));
  }

  printf("\n");

  for(double t = set(time, (union iterator_value) 5.0).d;
      t > 0.0; t = prev(time).d) {
    printf("%f  %f  %f\n", t, cos(t), sin(t));
  }

  Object s = clone(time);
  display(s, stderr);
  delete(s);

  delete(time);
}
%! codeend
................................................................................
%! end
